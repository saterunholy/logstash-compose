filter {
    translate {
        field => "caption"
        dictionary_path => "/home/pipelines/lsctl/config/solarwinds_examples/dictionary/dictionary_solarwinds_inventory_by_caption.csv"
        refresh_interval => "3600"
        destination => "dictionary_info"
        fallback => "unknown"
        override => true
    }
    mutate { add_field => [ "debug_dictio", "%{dictionary_info}" ] }
    if [dictionary_info] == "unknown" {
        translate {
            field => "sysname"
            dictionary_path => "/home/pipelines/lsctl/config/solarwinds_examples/dictionary/dictionary_solarwinds_inventory_by_caption.csv"
            refresh_interval => "3600"
            destination => "dictionary_info"
            fallback => "unknown"
            override => true
        }
      #mutate { add_field => [ "debug_dictio2", "%{dictionary_info}" ] }
      #mutate { add_field => [ "debug", "trans2" ] }
    }

    if [dictionary_info] != "unknown" {
        csv {
            source => "dictionary_info"
            columns => [ "GroupName", "SubGroupName", "location_name", "sublocation", "location_pos_name", "location_cherwell", "location_solarwinds", "location_name_general", "affectation_perc", "node_type", "location_type", "location_iata", "location_latitude", "locati
on_longitude" ]
            separator => "|"
        }
        if [location_latitude] and [location_longitude] {
            mutate { add_field => [ "location_geoinfo", "%{location_latitude},%{location_longitude}" ] }
        }
      #mutate { add_field => [ "debug", "getinfocsv1" ] }
   }
   else {
         if [caption] =~ /^(HF|HM|EL|TP|DC|hf|hm|el|tp|dc|BTH|DC|bth|dc)/ {
            grok {
               match => { "caption" => ["(?<location_hmscode>(HF|HM|EL|TP|DC|hf|hm|el|tp|dc)([a-zA-Z]{3}))[-_\.]{1}", "(?<location_hmscode>^(BTH|DC|bth|dc))"] }
               }
               if [location_hmscode] {
                   mutate {
                        uppercase => [ "location_hmscode" ]
                   }
               translate {
                  field => "location_hmscode"
                  dictionary_path => "/home/pipelines/lsctl/config/solarwinds_examples/dictionary/dictionary_solarwinds_hmscodes.csv"
                  refresh_interval => "3600"
                  destination => "dictionary_info"
                  fallback => "unknown"
                  override => true
                   }
               #mutate { add_field => [ "debug_dictio3", "%{dictionary_info}" ] }
               #mutate { add_field => [ "debug", "trans3" ] }

               if [dictionary_info] !~ /unknown/ {
                  csv {
                     source => "dictionary_info"
                     columns => [ "GroupName", "SubGroupName", "location_name", "sublocation", "location_pos_name", "location_cherwell", "location_solarwinds", "location_name_general", "affectation_perc", "node_type", "location_type", "location_iata", "location_latitude"
, "location_longitude" ]
                     separator => "|"
                  }
                  if [location_latitude] and [location_longitude] {
                     mutate { add_field => [ "location_geoinfo", "%{location_latitude},%{location_longitude}" ] }
                  }
                  #mutate { add_field => [ "debug", "getinfocsv2" ] }
               }
               if [dictionary_info] == "unknown" {
                  #mutate { add_field => [ "debug", "lasttry" ] }
                  grok {
                     match => { "location_hmscode" => "(?<location_prefix>^(..))..." }
                  }
                  if [location_prefix] =~ /TP/ {
                        mutate { add_field => [ "location_type", "Travel Plaza"] }
                  }
                  else if [location_prefix] =~ /(HM|HF)/ {
                        mutate { add_field => [ "location_type", "Airport"] }
                  }
                  else {
                     mutate { add_field => [ "location_type", "Corporate"] }
                  }
               }
             }
           }
   }

    #this section is for correlate the stores that was found by ARP process /arp_ne_vs_stores on each NE, this help the siteperspective dashbord for identify
    elasticsearch {
                hosts => ["${SRE_ES_URL1}", "${SRE_ES_URL2}", "${SRE_ES_URL3}"]
                user => "${SRE_ES_USER}"
                password => "${ELASTIC_PASS}"
                index => "arp_ne_vs_stores*"
                query_template => "${SRE_LS_Pipelines_Path}/solarwinds/get_stores_by_caption.json"
                fields => {
                        "StoresBothPorts" => "stores_names"
                }

   }
   mutate {
        split => { "location_pos_name" => "," }
   }
   #end siteperspective modification

   if ![location_country] and [GroupName] {
      mutate { add_field => [ "location_country", "%{GroupName}" ] }
   }
   if ![location_type] {
      mutate { add_field => [ "location_type", "unknown" ] }
   }
   if ![location_iata] {
      mutate { add_field => [ "location_iata", "unknown" ] }
   }
   if ![node_type] {
      mutate { add_field => [ "node_type", "unknown" ] }
   }
   if ![GroupName] {
      mutate { add_field => [ "GroupName", "unknown" ] }
   }
   if ![SubGroupName] {
      mutate { add_field => [ "SubGroupName", "unknown" ] }
   }
   if ![sublocation] {
      mutate { add_field => [ "sublocation", "unknown" ] }
   }
   if ![location_name] {
      mutate { add_field => [ "location_name", "unknown" ] }
   }

   if ![affectation_perc] {
      mutate { add_field => [ "affectation_perc", "0" ] }
   }
   if [location_name] and ([sublocation] == "NULL" or [sublocation] == "unknown" or [sublocation] == "NA") {
      mutate { add_field => [ "location_name_final", "%{location_name}" ] }
   }
   else if [sublocation]{
      mutate { add_field => [ "location_name_final", "%{sublocation}" ] }
   }
   else {
      mutate { add_field => [ "location_name_final", "unknown" ] }
   }
   mutate { add_field => [ "vendor_copy", "%{vendor}" ] }
}

